<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>승뮤니티</title>
    <meta name="description" content="게시물 수정 페이지입니다. 작성한 게시물의
    제목과 내용을 수정할 수 있습니다.">
    <link rel="stylesheet" href="\main.css">
</head>
<%- include('../partials/nav.ejs', { isRead: isRead }) %>
<body class="grey-bg">
    <div class="section2">
        <div style="height:60px;"></div>
        <form class="form-box form-box4" id="edit-form" method="POST">
            <h4>수정하기</h4>
            <input name="id" value = "<%= result._id %>" style="display: none">
            <input class="edit-title" name="title" value = "<%= result.title %>">
            <textarea name="content"><%= result.content %></textarea>
            <button type="submit" aria-label="수정한 게시물 등록">
                <ion-icon name="paper-plane-outline"></ion-icon>
            </button>
            <p style="clear: both;"></p>
            <input name="userId" value = "<%= result.작성자_id %>" style="display: none">
        </form> 
    </div>
    <script type="module">
        import {makeSnowflake2} from '/snow.js';
        window.onload = function(){
            for (let i = 0; i < 40; i++){
                setTimeout(makeSnowflake2(), 500 * i);
            }
        }      
    </script>
    <script type="module" src="https://unpkg.com/ionicons@7.1.0/dist/ionicons/ionicons.esm.js"></script>
    <script nomodule src="https://unpkg.com/ionicons@7.1.0/dist/ionicons/ionicons.js"></script>
    <script>
        const curPostId = '<%= result._id %>'
        // 게시글 수정
        document.getElementById('edit-form').addEventListener('submit', async function(event) {
            event.preventDefault();
            const form = event.target;
            const formData = new FormData(form);
            if (!formData.get('title') || !formData.get('content')){
              alert('제목 또는 내용을 작성해 주세요');
              return;
            }
            const data = {
                title: formData.get('title'),
                content: formData.get('content'),
                userId: formData.get('userId')
            };
            try {
                const response = await fetch(`/posts/${curPostId}?_method=PUT`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data)
                });
                if (response.ok){
                    alert('수정이 완료되었습니다.');
                    window.location.replace('/posts/page/1');
                } else if (response.status == 400){
                    alert('제목을 20글자 이하로 지정해주세요.');
                } else if (response.status == 403){
                    alert('수정할 수 없습니다.')
                } else if (response.status == 500){
                    alert('서버 오류가 발생했습니다');
                } else {
                    alert('알 수 없는 오류가 발생했습니다');
                }
            } catch(error){
                alert('네트워크 오류가 발생했습니다');
            }
        })
    </script>
</body>
</html>