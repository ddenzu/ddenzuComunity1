<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1, minimum-scale=1">    
    <link rel="stylesheet" href="\main.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
</head>
<body class="fix" style="position: relative;">
    <%- include('nav.ejs', { isRead: isRead }) %>
    <div class="section2">
        <div style="height:55px;"></div>
        <div class="detail-bg">
            <h4 >
                <%= 글목록.title %>
                <p class="date-p"><%= 글목록.date %></p>
            </h4>
            <p>
                <a class="profile-image-box" href="/chat/matches?name=<%= 글목록.작성자 %>&id=<%= 글목록.작성자_id %>">
                    <img src="https://ddenzubucket.s3.ap-northeast-2.amazonaws.com/<%= 프로필 %>" 
                    loading="lazy" onerror="this.src='/image/dinosaur.webp'"/>
                    <%= 글목록.작성자 %>
                </a> 
                <a class="postEdit" href="/edit/<%= 글목록._id %>">
                    <ion-icon style="font-size: 20px;" name="create-outline"></ion-icon>
                </a>
            </p>
            <% for (let i = 0; i < 동영상주소.length; i++) { %>
                <div class="img-box">
                    <video src="https://ddenzubucket.s3.ap-northeast-2.amazonaws.com/<%= 동영상주소[i] %>" type="video/mp4" controls muted loop autoplay 
                    playsinline preload="metadata" style="width: 200px" loading="lazy" onerror="this.style.display='none';">
                    </video>
                </div>
            <% } %>
            <% for (let i = 0; i < 이미지주소.length; i++) { %>
                <div class="img-box">
                    <img loading="lazy" 
                    src="https://ddenzubucket.s3.ap-northeast-2.amazonaws.com/<%= 이미지주소[i] %>"/>
                </div>
            <% } %>
            <p style="font-size: 15px;">
                <% 
                var contentWithLinksAndVideos = 글목록.content.replace(
                    /((http|https):\/\/[^\s]+)/g,
                    function(match, url) {
                        // 만약 매치된 주소가 유튜브 주소인 경우
                        if (url.includes('youtube.com') || url.includes('youtu.be')) {
                            // 유튜브 동영상의 ID를 추출
                            var youtubeID = url.match(/[?&]v=([^&#]*)|youtu\.be\/([^&#]*)/);
                            if (youtubeID) {
                                return '<iframe src="https://www.youtube.com/embed/' + (youtubeID[1] || youtubeID[2]) + '?mute=1&vq=hd1080" frameborder="0" allowfullscreen loading="lazy"></iframe>';
                            }
                        }
                        // 그 외의 경우에는 일반 링크로 처리
                        return '<a href="' + url + '" target="_blank">' + url + '</a>';
                    }
                ).replace(/\n/g, '<br/>');
                %>
                <%- contentWithLinksAndVideos %> 
            </p>
            <div class="like-box">
                <div id="likee">
                    <span name="like" class="like" data-postId="<%= 글목록._id %>" id="likeButton">
                        <i class="fa-solid fa-thumbs-up like-icon"></i>
                    </span>
                    <span id="like-cnt" >
                        <p class="like" style="margin: 0px;"><%= 글목록.like %></p>
                    </span>
                </div>
            </div>
        </div> 

        <div class="comment">
                <div class="ccontainer">
                    <div class="comment-bar">
                        <div class="comment-write" style="width:97%;">
                            <textarea id="comment-input" placeholder=" 엔터누르면 줄바꿈"></textarea>
                            <button id="comment-btn">
                                <ion-icon name="paper-plane-outline"></ion-icon>
                            </button>
                        </div>
                    </div>
                </div>
            <div id="comment-box" style="margin: 0; display: block;">
                <%for (let i=0; i<댓글목록.length; i++){ %>
                    <p class="comment-list">
                        <div class="profile">
                            <div class="profileImage" data-name="<%= 댓글목록[i].username %>" data-id="<%= 댓글목록[i].userId %>">
                                <button style="background: transparent; border: none;">
                                    <a href="/chat/matches?name=<%= 댓글목록[i].username %>&id=<%= 댓글목록[i].userId %>">
                                        <img class="comment-profile-image" loading="lazy" 
                                        src="https://ddenzubucket.s3.ap-northeast-2.amazonaws.com/<%= 댓글목록[i].userprofile %>"
                                        onerror="this.src='/image/dinosaur.webp'" />
                                    </a>
                                </button>
                            </div>
                            <div class="profile2">
                                <div class="profiletext"><%= 댓글목록[i].username %></div>
                            </div>
                        </div>
                        <div id="profile3" class="profile3"><%- 댓글목록[i].content.replace(/\n/g, '<br/>') %>
                            <p style="clear: both"></p>
                            <p class="commentTime">
                                <% var time = dateFormat1.dateFormat(new Date(댓글목록[i].date)) %>
                                <%= time %>
                                <div class="reComment" data-num="<%= i %>">답글</div>
                                <div class="reComment_cancel changeNameVisible" data-num="<%= i %>">취소</div>
                            </p>  
                            <div class="reComment_box changeNameVisible">
                                <textarea class="reComment_input" id="reComment-input" placeholder="엔터누르면 줄바꿈"></textarea>
                                <ion-icon class="reComment_send" name="paper-plane-outline"
                                data-id="<%= 댓글목록[i]._id %>" data-num="<%= i %>"></ion-icon>
                            </div>
                            <div style="clear: both"></div>
                            <%for (let j=0; j<대댓글.length; j++){ %>
                                <% a= JSON.stringify(대댓글[j].parentId) %>
                                <% b= JSON.stringify(댓글목록[i]._id) %>
                                <%if(a==b){%>
                                    <div class="reComment-box">
                                        <div style="display: flex; flex-direction: column;">
                                            <a href="/chat/matches?name=<%= 대댓글[j].username %>&id=<%= 대댓글[j].userId %>">
                                                <img class="comment-profile-image" style="padding-left: 8px;" loading="lazy" 
                                                src="https://ddenzubucket.s3.ap-northeast-2.amazonaws.com/<%= 대댓글[j].userprofile %>"
                                                onerror="this.src='/image/dinosaur.webp'" />
                                            </a>
                                            <div class="profiletext profiletext-recomment"><%= 대댓글[j].username %></div>
                                        </div>
                                        <div class="recomment-content-box">
                                            <p class="recomment-content"><%= 대댓글[j].content %></p>
                                            <% var time1 = dateFormat1.dateFormat(new Date(대댓글[j].date)) %>
                                            <p class="recommentTime"><%= time1 %></p>
                                        </div>
                                        <span style="margin: 7px 0px 0px 7px;" name="add" id="commentDel" data-id="<%= 대댓글[j]._id %>"
                                            data-postId="<%= 대댓글[j].postId %>" data-userId="<%= 대댓글[j].userId %>">
                                            <ion-icon style="font-size: 20px;" name="trash-outline"></ion-icon>
                                        </span>
                                    </div>
                                <%} %>
                            <%}%>
                        </div>
                        <span name="add" id="commentDel" data-id="<%= 댓글목록[i]._id %>"
                            data-postId="<%= 댓글목록[i].postId %>" data-userId="<%= 댓글목록[i].userId %>">
                            <ion-icon style="font-size: 20px;" name="trash-outline"></ion-icon>
                        </span>
                    </p>
                    <div style="clear: both; height: 0px;"></div>
                    <p class="comment-line"></p>
                <% }%>
                
            </div>
        </div>
        <div class="infomation">
        </div>
    </div>
    <script type="module">
        import {makeSnowflake2} from '/snow.js';
        window.onload = function(){
            for (let i = 0; i < 40; i++){
                setTimeout(makeSnowflake2(), 500 * i);
            }
        }       
      </script>
    <script src="https://code.jquery.com/jquery-3.7.1.min.js" integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>
    <script type="module" src="https://unpkg.com/ionicons@7.1.0/dist/ionicons/ionicons.esm.js"></script>
    <script nomodule src="https://unpkg.com/ionicons@7.1.0/dist/ionicons/ionicons.js"></script>
    <script>
        const curPostId = '<%= 글목록._id %>'
        const curPostTitle = '<%= 글목록.title %>'
        const curPostContent = '<%- 글목록.content.replace(/(?:\r\n|\r|\n)/g, '<br>') %>'

        function handleResponse(response) {
            if (response.ok) {
                $('#comment-box').load(location.href + ' #comment-box');
                $('#comment-input').val('');
                return;
            } else if (response.status == 400) {
                alert('내용을 입력해 주세요');
            } else if (response.status == 401) {
                if (confirm('댓글 작성을 위해 로그인 페이지로 이동하시겠습니까?')) {
                    window.location.replace('/log');
                }
            } else if (response.status == 403) {
                alert("본인의 댓글만 삭제할 수 있습니다");
            } else if (response.status == 404) {
                alert("댓글이 존재하지 않습니다");
            } else if (response.status == 500) {
                alert('서버 오류가 발생했습니다');
            } else {
                alert('알 수 없는 오류가 발생했습니다');
            }
        }

        // 댓글 입력 버튼 클릭 시
        $('#comment-btn').click(async function() {
            const commentContent = $('#comment-input').val()
            if (!commentContent) {
                alert('내용을 입력해 주세요');
                return;
            }
            const data = {
                parent : curPostId,
                content : commentContent,
            }
            try {
                const response = await fetch('/detail/comments', {
                    method : 'POST',
                    headers : { 'Content-Type' : 'application/json' },
                    body : JSON.stringify(data)
                })
                handleResponse(response)
            } catch (error) {
                alert('네트워크 오류가 발생했습니다');
            }
            
        })

        // 대댓글 전송 버튼 클릭 시
        $(document).on("click",".reComment_send", async function(e){
            const reCommentContent = document.querySelectorAll('#reComment-input')[e.target.dataset.num].value;
            if (!reCommentContent) {
                alert('내용을 입력해 주세요');
                return;
            }
            document.querySelectorAll('#reComment-input')[e.target.dataset.num].value = '';
            var data = {
                parent : curPostId,
                reparent : e.target.dataset.id,
                content : reCommentContent,
            }
            try {
                const response = await fetch('/detail/recomments', {
                    method : 'POST',
                    headers : { 'Content-Type' : 'application/json' },
                    body : JSON.stringify(data)
                })
                handleResponse(response)
            } catch(error){
                alert('네트워크 오류가 발생했습니다')
            }
        })

        // 댓글 삭제 버튼 클릭 시
        $(document).on("click","span[name='add']", async function(e){
            if (confirm('정말로 삭제하시겠습니까?')==true){
                var data = {
                    id : this.dataset.id, // 댓글 id
                    userId : this.dataset.userid // 댓글 작성자 id
                } 
                try {
                    const response = await fetch('/detail/comments', {
                        method : 'DELETE',
                        headers : { 'Content-Type' : 'application/json' },
                        body : JSON.stringify(data)
                    })
                    handleResponse(response)
                } catch(error){
                    alert('네트워크 오류가 발생했습니다')
                }
            }
        }) 

        // 좋아요 버튼 클릭 시
        $(document).on("click","span[name='like']", async function(e){
            const data = { postid : curPostId }
            const response = await fetch('/detail/like', {
                method: 'PUT',
                headers: {'Content-Type': 'application/json' },
                body: JSON.stringify(data) 
            })
            if(response.ok){
                $('#like-cnt').load(location.href+' #like-cnt');
                return
            } else {
                alert('서버 오류가 발생했습니다');
            }
        })        

        // 좋아요 버튼 클릭 시 애니메이션
        const likeButton = document.getElementById('likeButton');
        likeButton.addEventListener('click', function() {
            var icon = this.querySelector('.like-icon');
            icon.style.color = '#FE4D4D';
            icon.style.transform = 'scale(1.2)';
            setTimeout(function() {
                icon.style.color = 'white';
                icon.style.transform = 'scale(1)';
            }, 500);
        });

        // 닉네임이 너무 길 때
        $(document).ready(function() {
            const profileElement = $('.profile2');
            if (profileElement.html() && profileElement.html().length > 2) {
                profileElement.text().substr(0, 3);
            }
        });

        // 대댓글 UI
        $(document).on("click",'.reComment', function(e){
            document.querySelectorAll('.reComment_box')[this.dataset.num].classList.remove('changeNameVisible');
            document.querySelectorAll('.reComment')[this.dataset.num].classList.add('reComment_click');
            document.querySelectorAll('.reComment_cancel')[this.dataset.num].classList.remove('changeNameVisible');
        })        
        $(document).on("click",'.reComment_cancel', function(e){
            document.querySelectorAll('.reComment_box')[this.dataset.num].classList.add('changeNameVisible');
            document.querySelectorAll('.reComment')[this.dataset.num].classList.remove('reComment_click');
            document.querySelectorAll('.reComment_cancel')[this.dataset.num].classList.add('changeNameVisible');
        })

        // 메세지 읽고 뒤로가기 했을 때 읽음처리
        window.addEventListener('pageshow', async (event) => { 
            const what = {
                content : "detail",
            }
            const response = await fetch('/log/locations', {
                method : 'PUT',
                headers : { 'Content-Type' : 'application/json' },
                body : JSON.stringify(what)
            })
            if(!response.ok){
                return
            } else {
                $('.navigation').load(location.href+' .navigation');
            }
        });
    </script>

</body>
</html>